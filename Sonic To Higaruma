print("This file was made by Gamblelord on github.")
local lplr = game.Players.LocalPlayer
local char = lplr.Character or lplr.CharacterAdded:Wait()

-- Object Removers (will remove vfx on the weapons, though)
local katana1 = false -- Make true if you want to remove Blade Master's katana
local katana2 = true -- Make true if you want to remove Sonic's katana
local bat = false -- Make true if you want to remove Metal Bat's baseball bat
if katana1 then char:FindFirstChild("Sheathe"):Destroy() char:FindFirstChild("#KATANAWEAPON"):Destroy() end
if katana2 then char:FindFirstChild("Sheathed"):Destroy() char:FindFirstChild("#NinjaKATANA"):Destroy() end
if bat then char:FindFirstChild("#BATWEAPON"):Destroy() end

-- Editing names
local plrgui:PlayerGui = lplr:FindFirstChild("PlayerGui")
local gui:ScreenGui = plrgui:FindFirstChild("ScreenGui")
local ultbar:Frame = gui:FindFirstChild("MagicHealth")
local ultbarclr:Frame = ultbar:FindFirstChild("Health").Bar.Bar
local ulttext:TextButton = ultbar:FindFirstChild("TextLabel")

-- Awakening text & color
ulttext.Text = "Verdict Reached"
ultbarclr.BackgroundColor3 = Color3.fromRGB(136, 0, 0) -- In RGB values (red, green, blue)

local hotbar:ScreenGui = plrgui:FindFirstChild("Hotbar")
local backpack = hotbar:FindFirstChild("Backpack")
local hotbarf:Frame = backpack:FindFirstChild("Hotbar")
local bbb1, bbb2, bbb3, bbb4 = hotbarf["1"], hotbarf["2"], hotbarf["3"], hotbarf["4"]
local bb1, bb2, bb3, bb4 = bbb1["Base"], bbb2["Base"], bbb3["Base"], bbb4["Base"]
local b1, b2, b3, b4 = bb1["ToolName"], bb2["ToolName"], bb3["ToolName"], bb4["ToolName"]

-- Move names
local function SetMoveNames()
    b1.Text = "Mallet Flash"
    b2.Text = "Courts Ruling"
    b3.Text = "Judicial Maelstrom"
    b4.Text = "Gavel Strike"
end
SetMoveNames()

-- Awakening move names
local function SetAwkNames()
    b1.Text = "Divine Warrant"
    b2.Text = "Final Judgement"
    b3.Text = "Conviction"
    b4.Text = "Execution"
end

-- Animations
-- Old Animations (Animations that are currently being replaced)
local oldAnimations = {
    m1 = "10469493270", -- Replace with the old m1 animation ID
    m2 = "10469630950", -- Replace with the old m2 animation ID
    m3 = "10469639222", -- Replace with the old m3 animation ID
    m4 = "10469643643", -- Replace with the old m4 animation ID
    ds = "10470104242", -- Actually, DON'T replace this
    up = "10503381238", -- Actually, DON'T replace this
    wc = "15955393872", -- Replace with the old wall combo animation ID
    fdash = "18715858574", -- Actually, DON'T replace this
    bdash = "...", -- Actually, DON'T replace this
    ldash = "10480796021", -- Actually, DON'T replace this
    rdash = "10480793962", -- Actually, DON'T replace this
    awk = "13499771836", -- Replace with the old awakening animation ID
    move1 = "13309500827", -- Replace with the old move 1 animation ID
    move2 = "13294790250", -- Replace with the old move 2 animation ID
    move3 = "13376962659", -- Replace with the old move 3 animation ID
    move4 = "13501296372", -- Replace with the old move 4 animation ID
    amove1 = "13632347366", -- Replace with the old awakening move 1 animation ID
    amove2 = "13643152947", -- Replace with the old awakening move 2 animation ID
    amove3 = "13723174078", -- Replace with the old awakening move 3 animation ID
    amove4 = "13881335713", -- Replace with the old awakening move 4 animation ID
}

-- New Animations (Animations that will replace the old ones)
local newAnimations = {
    m1 = "17889458563", -- Replace with your new m1 animation ID
    m2 = "17889461810", -- Replace with your new m2 animation ID
    m3 = "17889471098", -- Replace with your new m3 animation ID
    m4 = "17889290569", -- Replace with your new m4 animation ID
    ds = "10470104242", -- Replace with your new downslam animation ID
    up = "10503381238", -- Replace with your new mini uppercut animation ID
    wc = "16310343179", -- Replace with your new wall combo animation ID
    fdash = "18715858574", -- Replace with your new front dash animation ID
    bdash = "696969", -- Replace with your new back dash animation ID
    ldash = "10480796021", -- Replace with your new left dash animation ID
    rdash = "10480793962", -- Replace with your new right dash animation ID
    awk = "13716964686", -- Replace with your new awakening animation ID
    move1 = "14351441234", -- Replace with your new move 1 animation ID
    move2 = "14299135500", -- Replace with your new move 2 animation ID
    move3 = "15676072469", -- Replace with your new move 3 animation ID
    move4 = "14003607057", -- Replace with your new move 4 animation ID
    amove1 = "18716893399", -- Replace with your new move awakening 1 animation ID
    amove2 = "134494086123052", -- Replace with your new move awakening 2 animation ID
    amove3 = "18715891164", -- Replace with your new move awakening 3 animation ID
    amove4 = "18716865654", -- Replace with your new move awakening 4 animation ID
}

-- Code/functions to use in the handlers
local function chat(msg: string)
    game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(msg, "All")
end
local function playAnimation(id, details)
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if not humanoid or not humanoid:FindFirstChild("Animator") then
        warn("Invalid humanoid or humanoid has no Animator.")
        return
    end
    
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. tostring(id)
    
    local animator:Animator = humanoid:FindFirstChild("Animator")
    local animationTrack = animator:LoadAnimation(animation)

    animationTrack:Play()
    
    if details then
        if details.Priority then
            animationTrack.Priority = details.Priority
        end
        if details.Looped ~= nil then
            animationTrack.Looped = details.Looped
        end
        if details.Speed then
            animationTrack:AdjustSpeed(details.Speed)
        end
        if details.TimePosition then
            animationTrack.TimePosition = details.TimePosition
        end
        if details.Weight then
            animationTrack:AdjustWeight(details.Weight)
        end
    end

    return animationTrack
end
local hrp = char:FindFirstChild("HumanoidRootPart")
local hum = char:FindFirstChildOfClass("Humanoid")
local bloodRainVFX = Instance.new("Part", workspace)
bloodRainVFX.Size = Vector3.new(500, 0.1, 500)
bloodRainVFX.CFrame = hrp.CFrame * CFrame.new(0, 500, 0)
bloodRainVFX.Transparency = 1
bloodRainVFX.CanCollide = false
bloodRainVFX.CastShadow = false
task.spawn(function()
    while true do
        bloodRainVFX.CFrame = hrp.CFrame * CFrame.new(0, 500, 0)
        task.wait()
    end
end)
hum.Died:Connect(function()
    bloodRainVFX:Destroy()
end)

-- Handlers for each m1s, the ultimate anim, and moves (if it doesnt have handlers, it would be a blank custom moveset script with no vfx, no other stuff other than custom animations)
local handlers = {
    m1 = function() end,
    m2 = function() end,
    m3 = function() end,
    m4 = function() end,
    wc = function() end,
    fdash = function() end,
    bdash = function() end,
    ldash = function() end,
    rdash = function() end,

    awk = function(tr)
local assetId = 17901300500
local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rightArm = character:WaitForChild("Right Arm")

local success, result = pcall(function()
	return game:GetObjects("rbxassetid://" .. assetId)
end)

if success and #result > 0 then
	local asset = result[1]
	asset.Parent = character

	local basePart

	-- Smart detection
	if asset:IsA("Accessory") then
		-- It's an Accessory: use the Handle
		basePart = asset:FindFirstChild("Handle")
	elseif asset:IsA("BasePart") then
		-- It's already a single part
		basePart = asset
	elseif asset:IsA("Model") then
		-- It's a Model: find first BasePart inside
		basePart = asset:FindFirstChildWhichIsA("BasePart", true)
	end

	if not basePart then
		warn("No usable BasePart or Handle found inside asset.")
		return
	end

	-- Position to Right Arm with slight downward offset
	local offset = CFrame.new(0, -1, -1.5) * CFrame.Angles(math.rad(180), 0, 350)
	basePart.CFrame = rightArm.CFrame * offset

	-- Weld to Right Arm
	basePart.Anchored = false
	basePart.CanCollide = false

	local weld = Instance.new("Weld")
	weld.Part0 = rightArm
	weld.Part1 = basePart
	weld.C0 = rightArm.CFrame:inverse() * basePart.CFrame
	weld.Parent = rightArm

	print("Successfully attached asset to Right Arm.")

else
	warn("Failed to load asset.")
end
    end,

    move1 = function(tr)
local assetId = 2535884047

local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rightArm = character:WaitForChild("Right Arm")

local success, result = pcall(function()
	return game:GetObjects("rbxassetid://" .. assetId)
end)

if success and #result > 0 then
	local asset = result[1]
	asset.Parent = character

	local basePart

	if asset:IsA("Accessory") then
		basePart = asset:FindFirstChild("Handle")
	elseif asset:IsA("BasePart") then
		basePart = asset
	elseif asset:IsA("Model") then
		basePart = asset:FindFirstChildWhichIsA("BasePart", true)
	end

	if not basePart then
		warn("No usable BasePart or Handle found inside asset.")
		return
	end

	-- FINAL corrected CFrame rotation
	local offset = CFrame.Angles(0, math.rad(180), math.rad(90)) * CFrame.new(0, 1, 0)
	basePart.CFrame = rightArm.CFrame * offset

	basePart.Anchored = false
	basePart.CanCollide = false

	local weld = Instance.new("Weld")
	weld.Part0 = rightArm
	weld.Part1 = basePart
	weld.C0 = rightArm.CFrame:inverse() * basePart.CFrame
	weld.Parent = rightArm

	print("Sword now correctly attached and rotated in Right Hand.")

	-- Wait for 3 seconds and then destroy the asset
	task.wait(3)
	asset:Destroy()
	print("Asset destroyed after 3 seconds.")
else
	warn("Failed to load asset.")
end
    end,

    move2 = function(tr)
local assetId = 2535884047

local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rightArm = character:WaitForChild("Right Arm")

local success, result = pcall(function()
	return game:GetObjects("rbxassetid://" .. assetId)
end)

if success and #result > 0 then
	local asset = result[1]
	asset.Parent = character

	local basePart

	if asset:IsA("Accessory") then
		basePart = asset:FindFirstChild("Handle")
	elseif asset:IsA("BasePart") then
		basePart = asset
	elseif asset:IsA("Model") then
		basePart = asset:FindFirstChildWhichIsA("BasePart", true)
	end

	if not basePart then
		warn("No usable BasePart or Handle found inside asset.")
		return
	end

	-- FINAL corrected CFrame rotation
	local offset = CFrame.Angles(0, math.rad(180), math.rad(90)) * CFrame.new(0, -1, 0)
	basePart.CFrame = rightArm.CFrame * offset

	basePart.Anchored = false
	basePart.CanCollide = false

	local weld = Instance.new("Weld")
	weld.Part0 = rightArm
	weld.Part1 = basePart
	weld.C0 = rightArm.CFrame:inverse() * basePart.CFrame
	weld.Parent = rightArm

	print("Sword now correctly attached and rotated in Right Hand.")

	-- Wait for 3 seconds and then destroy the asset
	task.wait(3)
	asset:Destroy()
	print("Asset destroyed after 3 seconds.")
else
	warn("Failed to load asset.")
end
    end,

    move3 = function(tr)
local assetId = 2535884047

local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rightArm = character:WaitForChild("Right Arm")

local success, result = pcall(function()
	return game:GetObjects("rbxassetid://" .. assetId)
end)

if success and #result > 0 then
	local asset = result[1]
	asset.Parent = character

	local basePart

	if asset:IsA("Accessory") then
		basePart = asset:FindFirstChild("Handle")
	elseif asset:IsA("BasePart") then
		basePart = asset
	elseif asset:IsA("Model") then
		basePart = asset:FindFirstChildWhichIsA("BasePart", true)
	end

	if not basePart then
		warn("No usable BasePart or Handle found inside asset.")
		return
	end

	-- FINAL corrected CFrame rotation
	local offset = CFrame.Angles(0, math.rad(180), math.rad(90)) * CFrame.new(0, -1, 0)
	basePart.CFrame = rightArm.CFrame * offset

	basePart.Anchored = false
	basePart.CanCollide = false

	local weld = Instance.new("Weld")
	weld.Part0 = rightArm
	weld.Part1 = basePart
	weld.C0 = rightArm.CFrame:inverse() * basePart.CFrame
	weld.Parent = rightArm

	print("Sword now correctly attached and rotated in Right Hand.")

	-- Wait for 3 seconds and then destroy the asset
	task.wait(3)
	asset:Destroy()
	print("Asset destroyed after 3 seconds.")
else
	warn("Failed to load asset.")
end
    end,

    move4 = function(tr)
local assetId = 2535884047

local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rightArm = character:WaitForChild("Right Arm")

local success, result = pcall(function()
	return game:GetObjects("rbxassetid://" .. assetId)
end)

if success and #result > 0 then
	local asset = result[1]
	asset.Parent = character

	local basePart

	if asset:IsA("Accessory") then
		basePart = asset:FindFirstChild("Handle")
	elseif asset:IsA("BasePart") then
		basePart = asset
	elseif asset:IsA("Model") then
		basePart = asset:FindFirstChildWhichIsA("BasePart", true)
	end

	if not basePart then
		warn("No usable BasePart or Handle found inside asset.")
		return
	end

	-- FINAL corrected CFrame rotation
	local offset = CFrame.Angles(0, math.rad(180), math.rad(90)) * CFrame.new(0, -1, 0)
	basePart.CFrame = rightArm.CFrame * offset

	basePart.Anchored = false
	basePart.CanCollide = false

	local weld = Instance.new("Weld")
	weld.Part0 = rightArm
	weld.Part1 = basePart
	weld.C0 = rightArm.CFrame:inverse() * basePart.CFrame
	weld.Parent = rightArm

	print("Sword now correctly attached and rotated in Right Hand.")

	-- Wait for 3 seconds and then destroy the asset
	task.wait(3)
	asset:Destroy()
	print("Asset destroyed after 3 seconds.")
else
	warn("Failed to load asset.")
end
    end,

    amove1 = function()
    end,
    
    amove2 = function()
    end,

    amove3 = function()
    end,

    amove4 = function()
    end,
}

-- Table of animation data for the animations
local animDt = {
    move2 = { Speed = 2.4 },
    move1 = { Speed = 2 },
    amove1 = { Speed = 1 },
    amove3 = { Speed = 0.4 },
}

local hum = char:FindFirstChildOfClass("Humanoid")
local animator = hum:FindFirstChildOfClass("Animator")
for k, v in pairs(oldAnimations) do
    animator.AnimationPlayed:Connect(function(tr)
        if tr.Animation.AnimationId == "rbxassetid://" .. v and tr.Animation.AnimationId ~= "rbxassetid://" .. newAnimations[k] then
            tr:Stop()
            local trdt = animDt[k] or { Weight = 10 }
            if not trdt["Weight"] then trdt.Weight = 10 end -- Avoid bad animation
            local newtr = playAnimation(newAnimations[k], trdt)
            task.spawn(function() handlers[k](newtr) end)

            if k == "awk" then
                task.wait(1.25) -- Modify for your character's ultimate animation length
                SetAwkNames()
            end
        end
    end)
end

lplr:GetAttributeChangedSignal("Ultimate"):Connect(function()
    if lplr:GetAttribute("Ultimate") == 0 then
        task.wait(0.5) SetMoveNames()
    end
end)